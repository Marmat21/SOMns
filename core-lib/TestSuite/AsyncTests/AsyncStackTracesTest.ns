class AsyncStackTracesTest usingPlatform: platform testFramework: minitest = Value (
| private TestContext  = minitest TestContext.
 private ClassMirror = platform mirrors ClassMirror.
 private Task = platform threading Task. |
)(  public class AsyncStackFrame new: asyncString = (
    (* This class represents an async stack frame *)
        |  private asyncStrings =  self splitAsyncString: asyncString.
           public actorID = asyncStrings at: 1.
           public methodSignature = asyncStrings at: 2.
           public fileName = asyncStrings at: 3.
           public fileLine = asyncStrings at: 4.
            |
        )(
        
        public splitAsyncString: aString = (
        ||
            ^ (aString split: ',') collect: [:string | (string beginsWith: ' ') ifTrue: [string substringFrom: 2 to: string length ] ifFalse: [string] ].

        )
    )

    private class AsyncTestBase = TestContext () (
    (* This class represent the base class for async stack trace tests, shadowing 
    the asyncTrace primitive to initialize AsyncStackFrame*)
        public asyncTrace = (
            ^ (1 asyncTrace collect: [:e | AsyncStackFrame new: e]) copyFrom: 3. 
        )
    )
    public class BasicAsyncTracesTests = AsyncTestBase () (

        public testRetrievingAsyncStackTraceReturnsArrayOfTraces = (
        (* IF I use reject: [... == Class] I get a True doesNotUnderstand: ==
        but it works with select: [... ~= Class]  *)
            | trace asyncTrace res |
            trace:: self asyncTrace.
            res:: (trace select: [:e | ((ClassMirror reflecting: e) classObject) ~= AsyncStackFrame ]).
            self assert: res isEmpty.
        )
        public testRetrievingAsyncStackTraceHasRightTopFrame = (
            | trace asyncTrace |
            trace:: self asyncTrace.
            self assert:(trace at: 1) methodSignature equals: 'BasicAsyncTracesTests>>#testRetrievingAsyncStackTraceHasRightTopFrame'
        )

    ) : ( TEST_CONTEXT = () )

    public class ForkJoinAsyncStackTraceTest = AsyncTestBase () (
        private calledMethod = (^ self asyncTrace)
        public testForkedAsyncStackTraceHasCorrectTopFrame = (
            | task trace asyncTrace result |
            task:: Task spawn: [ trace:: calledMethod ].
            result:: task join.
            self assert:(trace at: 1) methodSignature equals: 'ForkJoinAsyncStackTraceTest>>#calledMethod'
        )

        public testForkedAsyncStackTraceHasCallToSpawn = (
            | task trace asyncTrace result |
            task:: Task spawn: [ trace:: calledMethod ].
            task join.
            result:: trace collect: [:e | e methodSignature].
            self assert: (result contains: 'Task_class>>#spawn:')
        )

         public testForkedAsyncStackTraceHasCallToThisMethod = (
            | task trace asyncTrace result |
            task:: Task spawn: [ trace:: calledMethod ].
            task join.
            result:: trace collect: [:e | e methodSignature].
            self assert: (result contains: 'ForkJoinAsyncStackTraceTest>>#testForkedAsyncStackTraceHasCallToThisMethod')
        )
    ) : ( TEST_CONTEXT = () )
   
)
